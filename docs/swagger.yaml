definitions:
  dto.CheckRegisterOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  dto.CreateCommentRequest:
    properties:
      content:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: number
    required:
    - content
    - rating
    type: object
  dto.CreateGenreRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.GetBooksResponse:
    properties:
      author:
        type: string
      book_file_status:
        type: string
      cover_image_key:
        type: string
      cover_image_url:
        type: string
      description:
        type: string
      file_key:
        type: string
      file_url:
        type: string
      genres:
        items:
          $ref: '#/definitions/entity.Genre'
        type: array
      id:
        type: string
      is_public:
        type: boolean
      owner:
        $ref: '#/definitions/entity.User'
      owner_id:
        type: string
      publish_date:
        type: string
      title:
        type: string
    type: object
  dto.GetCommentsResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      rating:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        maxLength: 15
        minLength: 8
        type: string
      username:
        maxLength: 15
        minLength: 5
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  dto.SendRegisterOTPRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.SessionResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  entity.Book:
    properties:
      author:
        type: string
      book_file_status:
        type: string
      comments:
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      cover_image_key:
        type: string
      cover_image_url:
        type: string
      created_at:
        type: string
      description:
        type: string
      file_key:
        type: string
      file_url:
        type: string
      genres:
        items:
          $ref: '#/definitions/entity.Genre'
        type: array
      id:
        type: string
      is_public:
        type: boolean
      owner:
        $ref: '#/definitions/entity.User'
      owner_id:
        type: string
      publish_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  entity.Comment:
    properties:
      book:
        $ref: '#/definitions/entity.Book'
      book_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      rating:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: string
    type: object
  entity.Genre:
    properties:
      books:
        items:
          $ref: '#/definitions/entity.Book'
        type: array
      created_at:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.JSONResponseModel:
    properties:
      data: {}
      errors: {}
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: Login Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginRequest'
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      summary: Login User
      tags:
      - Auth
  /api/auth/otp:
    post:
      consumes:
      - application/json
      description: Send OTP for Register
      parameters:
      - description: Send OTP for Register Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/dto.SendRegisterOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      summary: Send OTP for Register
      tags:
      - Auth
  /api/auth/otp/check:
    post:
      consumes:
      - application/json
      description: Check OTP for Register
      parameters:
      - description: Check OTP for Register Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/dto.CheckRegisterOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      summary: Check OTP for Register
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register User
      parameters:
      - description: Register Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      summary: Register User
      tags:
      - Auth
  /api/auth/session:
    get:
      consumes:
      - application/json
      description: Get Session User Data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  $ref: '#/definitions/dto.SessionResponse'
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Get Session User Data
      tags:
      - Auth
  /api/books:
    get:
      consumes:
      - application/json
      description: Get Books
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Genre
        in: query
        name: genre
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Sort By
        in: query
        name: sort_by
        type: string
      - description: Sort Order
        in: query
        name: sort_order
        type: string
      - description: Owner ID
        in: query
        name: owner_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  items:
                    allOf:
                    - $ref: '#/definitions/dto.GetBooksResponse'
                    - properties:
                        genres:
                          items:
                            allOf:
                            - $ref: '#/definitions/entity.Genre'
                            - properties:
                                books:
                                  type: object
                              type: object
                          type: array
                        owner:
                          type: object
                      type: object
                  type: array
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Get Books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create Book
      parameters:
      - description: PDF File
        in: formData
        name: pdf_file
        required: true
        type: file
      - description: Title
        in: formData
        name: title
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Author
        in: formData
        name: author
        required: true
        type: string
      - description: Publish Date e.g 2025-03-05T17:56:10.119Z
        in: formData
        name: publish_date
        type: string
      - description: 'Genres e.g: Romance, Fiction, Drama'
        in: formData
        name: genres
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Create Book
      tags:
      - Books
  /api/books/{bookId}:
    delete:
      consumes:
      - application/json
      description: Delete Book
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Delete Book
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: Get Specific Book
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/dto.GetBooksResponse'
                  - properties:
                      genres:
                        items:
                          allOf:
                          - $ref: '#/definitions/entity.Genre'
                          - properties:
                              books:
                                type: object
                            type: object
                        type: array
                      owner:
                        type: object
                    type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Get Specific Book
      tags:
      - Books
  /api/books/{bookId}/comments:
    get:
      consumes:
      - application/json
      description: Get Comments of a Book
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Sort By
        in: query
        name: sort_by
        type: string
      - description: Sort Order
        in: query
        name: sort_order
        type: string
      - description: Top Comment Id
        in: query
        name: top_comment_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  items:
                    allOf:
                    - $ref: '#/definitions/dto.GetCommentsResponse'
                    - properties:
                        book:
                          type: object
                      type: object
                  type: array
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Get Comments of a Book
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Create Comments
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Create Comment Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Create Comments
      tags:
      - Comments
  /api/books/{bookId}/comments/{comentId}:
    delete:
      consumes:
      - application/json
      description: Delete Comment
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Delete Comment
      tags:
      - Comments
  /api/comments:
    get:
      consumes:
      - application/json
      description: Get All Comments
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Sort By
        in: query
        name: sort_by
        type: string
      - description: Sort Order
        in: query
        name: sort_order
        type: string
      - description: Top Comment Id
        in: query
        name: top_comment_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  items:
                    allOf:
                    - $ref: '#/definitions/dto.GetCommentsResponse'
                    - properties:
                        book:
                          type: object
                      type: object
                  type: array
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Get All Comments
      tags:
      - Comments
  /api/genres:
    get:
      consumes:
      - application/json
      description: Get Genres
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  items:
                    type: string
                  type: array
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      summary: Get Genres
      tags:
      - Genres
    post:
      consumes:
      - application/json
      description: Create Genres (Require Admin Account)
      parameters:
      - description: Create Genre Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGenreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponseModel'
            - properties:
                data:
                  type: object
                errors:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: Create Genres
      tags:
      - Genres
securityDefinitions:
  BearerAuth:
    description: '"Type ''Bearer TOKEN'' to correctly set the API Key"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
